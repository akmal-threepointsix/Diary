{"version":3,"sources":["hooks/useAppDispatch.ts","hooks/useAppSelector.ts","store/note/selectors/index.ts","config.ts","store/note/thunks/deleteNote.ts","helpers/isEditable.ts","store/note/thunks/getNote.ts","store/note/thunks/postNote.ts","store/note/thunks/putNote.ts","store/note/slice.ts","components/Container/Container.tsx","components/Loader/Loader.tsx","components/Footer/Footer.tsx","static/LargeLogo.png","components/Header/Header.tsx","components/PageTemplate/PageTemplate.tsx","components/$note/ShowNote/ShowNote.tsx","helpers/dateToString.ts","components/$note/WriteNote/WriteNote.tsx","components/$note/Note/Note.tsx","components/NotesCalendar/NotesCalendar.tsx","components/App/App.tsx","store/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","selectNote","state","note","BASE_API_URL","deleteNote","createAsyncThunk","fetchDate","a","fetch","method","res","ok","Error","statusText","status","dayDurationMs","today","Date","setUTCHours","isEditable","initialDate","Math","abs","getTime","isYesterdayOrTomorrow","isToday","getNote","json","data","postNote","url","headers","body","JSON","stringify","putNote","heading","content","modificationDate","initialState","undefined","noteSlice","createSlice","name","reducers","setNote","action","payload","setStatus","extraReducers","builder","addCase","rejected","fulfilled","toast","success","addMatcher","isAnyOf","pending","error","message","actions","Container","children","className","classNames","Loader","Footer","Header","to","src","logo","alt","type","value","PageTemplate","ShowNote","dispatch","date","useParams","dateObj","canEdit","onClick","dateToString","year","getFullYear","toString","month","getMonth","day","getDate","length","WriteNote","useForm","register","handleSubmit","onSubmit","_entry","required","placeholder","defaultValue","Note","useLayoutEffect","NotesCalendar","navigate","useNavigate","onClickDay","path","App","element","store","configureStore","reducer","noteReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b23cc107.chunk.js","sourcesContent":["import { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../store/store';\n\nconst useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>();\nexport default useAppDispatch;\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport type { RootState } from '../store/store';\n\nconst useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport default useAppSelector;\n","import { RootState } from '../../store';\nimport { INote } from '../../../types/INote';\n\nconst selectNote = (state: RootState): INote => state.note;\nexport default selectNote;\n","export const BASE_API_URL = 'https://localhost:6969/api';\n\nexport const isDev = process.env.NODE_ENV === 'development';\n\nexport const entryMocked = isDev;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, entryMocked } from '../../../config';\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\n\nconst deleteNote = createAsyncThunk<number, string>(\n  'notes/deleteNote',\n  async (fetchDate: string) => {\n    if (entryMocked) {\n      return returnDataWithDelay(200, 'fast 3G');\n    }\n\n    const res = await fetch(`${BASE_API_URL}/notes/${fetchDate}`, {\n      method: 'DELETE',\n    });\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    return res.status;\n  },\n);\n\nexport default deleteNote;\n","export const dayDurationMs = 24 * 60 * 60 * 1000;\r\nexport const today = new Date().setUTCHours(0, 0, 0, 0);\r\n\r\nconst isYesterdayOrTomorrow = (initialDate: Date) => {\r\n  return Math.abs(initialDate.getTime() - today) === dayDurationMs;\r\n};\r\n\r\nconst isToday = (initialDate: Date) => {\r\n  return initialDate.getTime() === today;\r\n};\r\n\r\nconst isEditable = (initialDate: Date): boolean => {\r\n  return isYesterdayOrTomorrow(initialDate) || isToday(initialDate);\r\n};\r\n\r\nexport default isEditable;\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, entryMocked } from '../../../config';\nimport { dayDurationMs, today } from '../../../helpers/isEditable';\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\nimport mockShowNote from '../../../mocks/mockShowNote';\n\nimport { INote } from '../../../types/INote';\n\nconst getNote = createAsyncThunk<INote, string>(\n  'notes/getNote',\n  async (fetchDate: string) => {\n    if (entryMocked) {\n      if (\n        Math.abs(new Date(fetchDate).getTime() - today) <=\n        dayDurationMs * 2\n      ) {\n        return returnDataWithDelay(mockShowNote, 'fast 3G');\n      }\n\n      throw new Error('Mock write');\n    }\n\n    const res = await fetch(`${BASE_API_URL}/notes/${fetchDate}`);\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    const data = await res.json();\n    return data as INote;\n  },\n);\n\nexport default getNote;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, entryMocked } from '../../../config';\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\nimport { INote } from '../../../types/INote';\n\nconst postNote = createAsyncThunk<INote, INote>(\n  'notes/postNote',\n  async (note: INote) => {\n    if (entryMocked) {\n      return returnDataWithDelay(note, 'fast 3G');\n    }\n\n    const url = `${BASE_API_URL}/notes/`;\n\n    const res = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(note),\n    });\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    const data = await res.json();\n    return data as INote;\n  },\n);\n\nexport default postNote;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, entryMocked } from '../../../config';\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\nimport { INote } from '../../../types/INote';\n\nconst putNote = createAsyncThunk<INote, INote>(\n  'notes/putNote',\n  async (note: INote) => {\n    if (entryMocked) {\n      return returnDataWithDelay(note, 'fast 3G');\n    }\n\n    const url = `${BASE_API_URL}/notes/${note.initialDate}`;\n\n    const res = await fetch(url, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        heading: note.heading,\n        content: note.content,\n        modificationDate: note.modificationDate,\n      }),\n    });\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    const data = await res.json();\n    return data as INote;\n  },\n);\n\nexport default putNote;\n","import { createSlice, isAnyOf, PayloadAction } from '@reduxjs/toolkit';\nimport { toast } from 'react-toastify';\nimport { INote } from '../../types/INote';\nimport { NoteStatus } from '../../types/NoteStatus';\nimport deleteNote from './thunks/deleteNote';\nimport getNote from './thunks/getNote';\nimport postNote from './thunks/postNote';\nimport putNote from './thunks/putNote';\n\nexport const initialState: INote = {\n  heading: undefined,\n  content: undefined,\n  initialDate: undefined,\n  modificationDate: undefined,\n  status: 'write',\n};\n\nexport const noteSlice = createSlice({\n  name: 'note',\n  initialState,\n  reducers: {\n    setNote: (state, action: PayloadAction<INote>) => {\n      state = action.payload;\n    },\n    setStatus: (state, action: PayloadAction<NoteStatus>) => {\n      state.status = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getNote.rejected, (state) => {\n      state.status = 'write';\n    });\n\n    builder\n      .addCase(postNote.fulfilled, () => {\n        toast.success('Note was saved!');\n      })\n      .addCase(putNote.fulfilled, () => {\n        toast.success('Note was updated!');\n      })\n      .addCase(deleteNote.fulfilled, (state) => {\n        state.status = 'write';\n        toast.success('Note was deleted!');\n      });\n    builder.addMatcher(\n      isAnyOf(\n        getNote.pending,\n        postNote.pending,\n        putNote.pending,\n        deleteNote.pending,\n      ),\n      (state) => {\n        state.status = 'loading';\n      },\n    );\n\n    builder.addMatcher(\n      isAnyOf(getNote.fulfilled, postNote.fulfilled, putNote.fulfilled),\n      (state, action) => {\n        const { heading, content } = action.payload;\n        state.heading = heading;\n        state.content = content;\n        state.status = 'show';\n      },\n    );\n\n    builder.addMatcher(\n      isAnyOf(postNote.rejected, putNote.rejected, deleteNote.rejected),\n      (state, action) => {\n        toast.error(action.error.message);\n      },\n    );\n  },\n});\n\nexport const { setNote, setStatus } = noteSlice.actions;\n\nexport default noteSlice.reducer;\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport './Container.css';\n\ninterface IProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst Container = ({ children, className }: IProps) => {\n  return <div className={classNames('container', className)}>{children}</div>;\n};\n\nexport default Container;\n","import React from 'react';\r\n\r\nimport './Loader.css';\r\n\r\nconst Loader = () => {\r\n  return <div className=\"loader\">Loading...</div>;\r\n};\r\n\r\nexport default Loader;\r\n","import React from 'react';\n\nimport './Footer.css';\nimport Container from '../Container/Container';\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <Container className=\"flex justify-between align-center\">\n        <p>© Web Application Programming, 2021-2022</p>\n        <p>Bohdan Soproniuk & Akmalkhon Mukhiddinov</p>\n      </Container>\n    </div>\n  );\n};\n\nexport default Footer;\n","export default __webpack_public_path__ + \"static/media/LargeLogo.e6a559ef.png\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport logo from '../../static/LargeLogo.png';\r\n\r\nimport './Header.css';\r\nimport Container from '../Container/Container';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <Container className=\"flex justify-between align-center\">\r\n        <Link to=\"/\">\r\n          <img src={logo} alt=\"Logo\" className=\"logo\" />\r\n        </Link>\r\n        <input\r\n          type=\"button\"\r\n          className=\"redButton logoutButton\"\r\n          value=\"Log out\"\r\n        />\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Footer from '../Footer/Footer';\r\nimport Header from '../Header/Header';\r\n\r\nimport './PageTemplate.css';\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nconst PageTemplate = ({ children, className }: Props) => {\r\n  return (\r\n    <section className=\"page\">\r\n      <Header />\r\n      <main className={classNames('page__content', className)}>{children}</main>\r\n      <Footer />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default PageTemplate;\r\n","import React from 'react';\n\nimport './ShowNote.css';\nimport { useParams } from 'react-router-dom';\nimport isEditable from '../../../helpers/isEditable';\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport { setStatus } from '../../../store/note/slice';\nimport deleteNote from '../../../store/note/thunks/deleteNote';\nimport { INote } from '../../../types/INote';\n\ninterface Props {\n  note: INote;\n}\n\nconst ShowNote = ({ note }: Props) => {\n  const dispatch = useAppDispatch();\n\n  const { heading, content } = note;\n  const { date } = useParams();\n  const dateObj = new Date(date as string);\n  const canEdit = isEditable(dateObj);\n\n  return (\n    <>\n      <div className=\"showNote\">\n        <h1 className=\"showHeading\">{heading}</h1>\n        <hr className=\"headingContentLine\" />\n        <p className=\"showContent\">{content}</p>\n      </div>\n      <div className=\"showContentControlButtons\">\n        {canEdit && (\n          <input\n            type=\"button\"\n            className=\"secondaryButton editButton\"\n            value=\"Edit\"\n            onClick={() => dispatch(setStatus('update'))}\n          />\n        )}\n        <input\n          type=\"button\"\n          className=\"redButton deleteButton\"\n          value=\"Delete\"\n          onClick={() => {\n            dispatch(deleteNote(date as string));\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ShowNote;\n","// Convert Date object to string 'yyyy-mm-dd'\nconst dateToString = (date: Date): string => {\n  const year = date.getFullYear().toString();\n  let month = (date.getMonth() + 1).toString();\n  let day = date.getDate().toString();\n\n  if (month.length < 2) month = `0${month}`;\n  if (day.length < 2) day = `0${day}`;\n\n  return `${year}-${month}-${day}`;\n};\n\nexport default dateToString;\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport './WriteNote.css';\nimport dateToString from '../../../helpers/dateToString';\n\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport { INote } from '../../../types/INote';\nimport postNote from '../../../store/note/thunks/postNote';\nimport putNote from '../../../store/note/thunks/putNote';\n\ninterface IProps {\n  note: INote;\n}\n\nconst WriteNote = ({ note }: IProps) => {\n  const dispatch = useAppDispatch();\n  const { register, handleSubmit } = useForm();\n  const { date } = useParams();\n\n  const { heading, content, status } = note;\n\n  const submitNote = (_entry: INote) => {\n    _entry.initialDate = date;\n\n    if (status === 'write') {\n      dispatch(postNote(_entry));\n    } else if (status === 'update') {\n      _entry.modificationDate = dateToString(new Date());\n      dispatch(putNote(_entry));\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(submitNote)} className=\"noteForm\">\n      <input\n        {...register('heading', { required: true })}\n        className=\"writeHeading inputField\"\n        placeholder=\"Title\"\n        defaultValue={heading}\n      />\n      <TextareaAutosize\n        {...register('content', { required: true })}\n        className=\"writeContent inputField\"\n        placeholder=\"Write your note...\"\n        defaultValue={content}\n      />\n      <input type=\"submit\" className=\"primaryButton saveButton\" value=\"Save\" />\n    </form>\n  );\n};\n\nexport default WriteNote;\n","import React, { useLayoutEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport './Note.css';\n\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport useAppSelector from '../../../hooks/useAppSelector';\nimport selectNote from '../../../store/note/selectors';\nimport { initialState } from '../../../store/note/slice';\nimport getNote from '../../../store/note/thunks/getNote';\nimport Container from '../../Container/Container';\nimport Loader from '../../Loader/Loader';\nimport PageTemplate from '../../PageTemplate/PageTemplate';\nimport ShowNote from '../ShowNote/ShowNote';\nimport WriteNote from '../WriteNote/WriteNote';\n\nconst Note = () => {\n  const dispatch = useAppDispatch();\n  const note = useAppSelector(selectNote);\n  const { date } = useParams();\n\n  useLayoutEffect(() => {\n    dispatch(getNote(date as string));\n  }, [dispatch, date]);\n\n  return (\n    <PageTemplate>\n      <Container>\n        {note.status === 'loading' && <Loader />}\n        {note.status === 'show' && <ShowNote note={note} />}\n        {note.status === 'write' && <WriteNote note={initialState} />}\n        {note.status === 'update' && <WriteNote note={note} />}\n      </Container>\n    </PageTemplate>\n  );\n};\n\nexport default Note;\n","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport './NotesCalendar.css';\r\nimport dateToString from '../../helpers/dateToString';\r\nimport Container from '../Container/Container';\r\nimport PageTemplate from '../PageTemplate/PageTemplate';\r\n\r\nconst NotesCalendar = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const redirectToNote = (date: Date) => {\r\n    const path = `/note/${dateToString(date)}`;\r\n    navigate(path);\r\n  };\r\n\r\n  return (\r\n    <PageTemplate>\r\n      <Container>\r\n        <Calendar className=\"calendar\" onClickDay={redirectToNote} />\r\n      </Container>\r\n    </PageTemplate>\r\n  );\r\n};\r\n\r\nexport default NotesCalendar;\r\n","import React from 'react';\nimport { Routes, Route, HashRouter } from 'react-router-dom';\nimport Note from '../$note/Note/Note';\nimport NotesCalendar from '../NotesCalendar/NotesCalendar';\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <Routes>\n        <Route path=\"/\" element={<NotesCalendar />} />\n        <Route path=\"/note/:date\" element={<Note />} />\n      </Routes>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport noteReducer from './note/slice';\n\nexport const store = configureStore({\n  reducer: {\n    note: noteReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the store load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web store is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different store. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport App from './components/App/App';\nimport { store } from './store/store';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport './index.css';\nimport './styles/colors.css';\nimport './styles/PrimaryButton.css';\nimport './styles/SecondaryButton.css';\nimport './styles/RedButton.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ToastContainer className=\"toast\" />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your store to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}