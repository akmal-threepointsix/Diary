{"version":3,"sources":["components/$buttons/PrimaryButton/PrimaryButton.tsx","config.ts","helpers/auth/loginUser.ts","mocks/mockAuth.ts","hooks/useAppDispatch.ts","store/user/slice.ts","components/Container/Container.tsx","components/Footer/Footer.tsx","static/LargeLogo.png","components/PageTemplateUnauth/PageTemplateUnauth.tsx","components/$auth/LoginPage/LoginPage.tsx","helpers/auth/registerUser.ts","components/$auth/RegistrationPage/RegistrationPage.tsx","hooks/useAppSelector.ts","store/note/selectors/index.ts","store/user/selectors/index.ts","helpers/getToken.ts","store/note/thunks/deleteNote.ts","helpers/isEditable.ts","store/note/thunks/fetchNote.ts","store/note/thunks/postNote.ts","store/note/thunks/putNote.ts","store/note/slice.ts","components/Loader/Loader.tsx","components/$buttons/RedButton/RedButton.tsx","components/Header/Header.tsx","components/PageTemplate/PageTemplate.tsx","components/$buttons/SecondaryButton/SecondaryButton.tsx","components/$note/ShowNote/ShowNote.tsx","helpers/dateToString.ts","components/$note/WriteNote/WriteNote.tsx","components/$note/Note/Note.tsx","helpers/isValidToken.ts","store/user/selectors/selectIsAuth.ts","components/NotesCalendar/NotesCalendar.tsx","components/App/App.tsx","store/store.ts","serviceWorker.ts","index.tsx"],"names":["PrimaryButton","value","className","isDisabled","onClick","type","classNames","disabled","BASE_API_URL","loginUser","Date","setHours","getHours","toString","user","a","url","fetch","method","headers","body","JSON","stringify","res","status","Error","ok","statusText","json","data","useAppDispatch","useDispatch","initialState","userName","localStorage","getItem","auth","token","expiration","userSlice","createSlice","name","reducers","setUsername","state","action","payload","setAuth","logout","undefined","removeItem","toast","warn","actions","Container","children","Footer","PageTemplateUnauth","src","logo","alt","LoginPage","dispatch","useForm","register","handleSubmit","setError","errors","formState","useState","setIsDisabled","submitLogin","credentials","message","onSubmit","required","placeholder","password","to","registerUser","RegistrationPage","criteriaMode","submitRegistration","validate","minLen","length","hasLowerCaseLetter","toUpperCase","hasUpperCaseLetter","toLowerCase","hasDigit","test","hasNonAlphanumericSymbol","render","messages","Object","entries","map","useAppSelector","useSelector","selectNote","note","selectExpiration","getToken","store","deleteNote","createAsyncThunk","fetchDate","thunkAPI","getState","Authorization","dayDurationMs","today","setUTCHours","isEditable","initialDate","Math","abs","getTime","isYesterdayOrTomorrow","isToday","fetchNote","postNote","putNote","heading","content","modificationDate","noteSlice","setNote","setStatus","extraReducers","builder","addCase","rejected","fulfilled","success","addMatcher","isAnyOf","pending","error","Loader","RedButton","Header","navigate","useNavigate","PageTemplate","SecondaryButton","ShowNote","date","useParams","dateObj","canEdit","dateToString","year","getFullYear","month","getMonth","day","getDate","WriteNote","_note","defaultValue","Note","useLayoutEffect","isValidToken","expirationDate","now","selectIsAuth","Boolean","NotesCalendar","onClickDay","path","App","isAuth","location","useLocation","useEffect","element","replace","configureStore","reducer","userReducer","noteReducer","subscribe","username","setItem","window","hostname","match","ReactDOM","StrictMode","autoClose","limit","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.8ebc60d4.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport { IButton } from '../../../types/IButton';\n\nconst PrimaryButton = ({ value, className, isDisabled, onClick }: IButton) => {\n  return (\n    <input\n      type=\"submit\"\n      className={classNames('primaryButton', className)}\n      value={value}\n      disabled={isDisabled}\n      onClick={onClick}\n    />\n  );\n};\n\nexport default PrimaryButton;\n","export const BASE_API_URL = 'https://localhost:6969/api';\n\nexport const isDev = process.env.NODE_ENV === 'development';\n\nexport const entryMocked = isDev;\nexport const userMocked = isDev;\n","import { BASE_API_URL, userMocked } from '../../config';\nimport mockAuth from '../../mocks/mockAuth';\nimport { IAuth } from '../../types/IAuth';\nimport { ICredentials } from '../../types/ICredentials';\nimport returnDataWithDelay from '../returnDataWithDelay';\n\nconst loginUser = async (user: ICredentials) => {\n  if (userMocked) {\n    return returnDataWithDelay(mockAuth, 'fast 3G');\n  }\n\n  const url = `${BASE_API_URL}/login/`;\n\n  const res = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(user),\n  });\n\n  const incorrectPassword = 401;\n  if (res.status === incorrectPassword) {\n    throw new Error('Username and password do not match');\n  }\n  if (!res.ok) throw new Error(res.statusText);\n\n  const data = await res.json();\n  return data as IAuth;\n};\n\nexport default loginUser;\n","import { IAuth } from '../types/IAuth';\r\n\r\nconst mockAuth: IAuth = {\r\n  token: 'mockToken',\r\n  expiration: new Date(\r\n    new Date().setHours(new Date().getHours() + 1),\r\n  ).toString(),\r\n};\r\n\r\nexport default mockAuth;\r\n","import { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../store/store';\n\nconst useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>();\nexport default useAppDispatch;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { toast } from 'react-toastify';\nimport { IAuth } from '../../types/IAuth';\nimport { IUser } from '../../types/IUser';\n\nexport const initialState: IUser = {\n  userName: localStorage.getItem('USERNAME'),\n  auth: {\n    token: localStorage.getItem('TOKEN'),\n    expiration: localStorage.getItem('EXPIRATION'),\n  },\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setUsername: (state, action: PayloadAction<string>) => {\n      state.userName = action.payload;\n    },\n    setAuth: (state, action: PayloadAction<IAuth>) => {\n      state.auth = action.payload;\n    },\n    logout: (state) => {\n      state.auth.token = null;\n      state.auth.expiration = undefined;\n      state.userName = undefined;\n      localStorage.removeItem('USERNAME');\n      localStorage.removeItem('TOKEN');\n      localStorage.removeItem('EXPIRATION');\n      toast.warn('Logged out');\n    },\n  },\n});\n\nexport const { setUsername, setAuth, logout } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport './Container.css';\n\ninterface IProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst Container = ({ children, className }: IProps) => {\n  return <div className={classNames('container', className)}>{children}</div>;\n};\n\nexport default Container;\n","import React from 'react';\n\nimport './Footer.css';\nimport Container from '../Container/Container';\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <Container className=\"flex justify-between align-center\">\n        <p>© Web Application Programming, 2021-2022</p>\n        <p>Bohdan Soproniuk & Akmalkhon Mukhiddinov</p>\n      </Container>\n    </div>\n  );\n};\n\nexport default Footer;\n","export default __webpack_public_path__ + \"static/media/LargeLogo.e6a559ef.png\";","import React from 'react';\nimport classNames from 'classnames';\nimport Footer from '../Footer/Footer';\nimport logo from '../../static/LargeLogo.png';\n\ninterface Props {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst PageTemplateUnauth = ({ children, className }: Props) => {\n  return (\n    <section className=\"page\">\n      <img src={logo} alt=\"Logo\" className=\"logo\" />\n      <main className={classNames('page__content', className)}>{children}</main>\n      <Footer />\n    </section>\n  );\n};\n\nexport default PageTemplateUnauth;\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport PrimaryButton from '../../$buttons/PrimaryButton/PrimaryButton';\nimport loginUser from '../../../helpers/auth/loginUser';\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport { setAuth, setUsername } from '../../../store/user/slice';\nimport { IAuth } from '../../../types/IAuth';\nimport { ICredentials } from '../../../types/ICredentials';\nimport Container from '../../Container/Container';\n\nimport './LoginPage.css';\nimport PageTemplateUnauth from '../../PageTemplateUnauth/PageTemplateUnauth';\n\nconst LoginPage = () => {\n  const dispatch = useAppDispatch();\n  const {\n    register,\n    handleSubmit,\n    setError,\n    formState: { errors },\n  } = useForm();\n\n  const [isDisabled, setIsDisabled] = useState(false);\n  const submitLogin = async (credentials: ICredentials) => {\n    setIsDisabled(true);\n    try {\n      const auth = await loginUser(credentials);\n      dispatch(setUsername(credentials.userName));\n      dispatch(setAuth(auth as IAuth));\n    } catch (error) {\n      setError('password', {\n        type: 'incorrectPassword',\n        message: error.message,\n      });\n    } finally {\n      setIsDisabled(false);\n    }\n  };\n\n  return (\n    <PageTemplateUnauth>\n      <Container>\n        <form onSubmit={handleSubmit(submitLogin)} className=\"loginForm\">\n          <input\n            {...register('userName', { required: true })}\n            type=\"text\"\n            className=\"loginInput\"\n            placeholder=\"Username\"\n          />\n          <input\n            {...register('password', { required: true })}\n            type=\"password\"\n            className=\"loginInput\"\n            placeholder=\"Password\"\n          />\n          {errors.password && (\n            <p className=\"errorMessage\">{errors.password.message}</p>\n          )}\n          <PrimaryButton\n            value=\"Log In\"\n            className=\"loginButton\"\n            isDisabled={isDisabled}\n          />\n        </form>\n        <div className=\"loginSubform\">\n          <p>\n            Don&apos;t have an account?&nbsp;\n            <Link to=\"/registration\">Sign Up</Link>\n          </p>\n        </div>\n      </Container>\n    </PageTemplateUnauth>\n  );\n};\n\nexport default LoginPage;\n","import { BASE_API_URL, userMocked } from '../../config';\nimport mockAuth from '../../mocks/mockAuth';\nimport { IAuth } from '../../types/IAuth';\nimport { ICredentials } from '../../types/ICredentials';\nimport returnDataWithDelay from '../returnDataWithDelay';\n\nconst registerUser = async (credentials: ICredentials) => {\n  if (userMocked) {\n    return returnDataWithDelay(mockAuth, 'fast 3G');\n  }\n\n  const url = `${BASE_API_URL}/register/`;\n\n  const res = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(credentials),\n  });\n\n  const unavailableUserName = 406;\n  if (res.status === unavailableUserName) {\n    throw new Error('Username already exists');\n  }\n  if (!res.ok) throw new Error(res.statusText);\n\n  const data = await res.json();\n  return data as IAuth;\n};\n\nexport default registerUser;\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport { ErrorMessage } from '@hookform/error-message';\nimport PrimaryButton from '../../$buttons/PrimaryButton/PrimaryButton';\nimport registerUser from '../../../helpers/auth/registerUser';\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport { setAuth, setUsername } from '../../../store/user/slice';\nimport { IAuth } from '../../../types/IAuth';\nimport { ICredentials } from '../../../types/ICredentials';\nimport Container from '../../Container/Container';\nimport PageTemplateUnauth from '../../PageTemplateUnauth/PageTemplateUnauth';\n\nimport './RegistrationPage.css';\n\nconst RegistrationPage = () => {\n  const dispatch = useAppDispatch();\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setError,\n  } = useForm({ criteriaMode: 'all' });\n\n  const [isDisabled, setIsDisabled] = useState(false);\n  const submitRegistration = async (credentials: ICredentials) => {\n    setIsDisabled(true);\n    try {\n      const auth = await registerUser(credentials);\n      dispatch(setUsername(credentials.userName));\n      dispatch(setAuth(auth as IAuth));\n    } catch (error) {\n      setError('userName', {\n        type: 'unavailableUsername',\n        message: error.message,\n      });\n    } finally {\n      setIsDisabled(false);\n    }\n  };\n\n  return (\n    <PageTemplateUnauth>\n      <Container>\n        <form onSubmit={handleSubmit(submitRegistration)} className=\"loginForm\">\n          <input\n            {...register('userName', { required: true })}\n            type=\"text\"\n            className=\"loginInput\"\n            placeholder=\"Username\"\n          />\n          {errors.userName && (\n            <p className=\"errorMessage\">{errors.userName.message}</p>\n          )}\n          <input\n            {...register('password', {\n              required: 'Password cannot be empty',\n              validate: {\n                minLen: (password: string) =>\n                  password.length >= 6 ||\n                  'Password must be at least 6 characters',\n                hasLowerCaseLetter: (password: string) =>\n                  password.toUpperCase() !== password ||\n                  'Password must have at least one lowercase letter',\n                hasUpperCaseLetter: (password: string) =>\n                  password.toLowerCase() !== password ||\n                  'Password must have at least one uppercase letter',\n                hasDigit: (password: string) =>\n                  /\\d/.test(password) ||\n                  'Password must have at least one digit',\n                hasNonAlphanumericSymbol: (password: string) =>\n                  /[^a-zA-Z0-9]/.test(password) ||\n                  'Password must have at least one non-alphanumeric symbol',\n              },\n            })}\n            type=\"password\"\n            className=\"loginInput\"\n            placeholder=\"Password\"\n          />\n          <ErrorMessage\n            errors={errors}\n            name=\"password\"\n            render={({ messages }) =>\n              messages &&\n              Object.entries(messages).map(([type, message]) => (\n                <p key={type} className=\"errorMessage\">\n                  {message}\n                </p>\n              ))\n            }\n          />\n          <PrimaryButton\n            value=\"Sign Up\"\n            className=\"loginButton\"\n            isDisabled={isDisabled}\n          />\n        </form>\n        <div className=\"loginSubform\">\n          <p>\n            Have an account?&nbsp;\n            <Link to=\"/\">Log In</Link>\n          </p>\n        </div>\n      </Container>\n    </PageTemplateUnauth>\n  );\n};\n\nexport default RegistrationPage;\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport type { RootState } from '../store/store';\n\nconst useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport default useAppSelector;\n","import { RootState } from '../../store';\nimport { INote } from '../../../types/INote';\n\nconst selectNote = (state: RootState): INote => state.note;\nexport default selectNote;\n","import { IAuth } from '../../../types/IAuth';\nimport { RootState } from '../../store';\n\nexport const selectUserName = (state: RootState): string | undefined | null =>\n  state.user.userName;\nexport const selectAuth = (state: RootState): IAuth => state.user.auth;\nexport const selectToken = (state: RootState): string | undefined | null =>\n  state.user.auth.token;\nexport const selectExpiration = (state: RootState): string | undefined | null =>\n  state.user.auth.expiration;\n","// First attempt to get token from Redux store, otherwise get token from the\n// localStorage. Reading from Redux store is faster.\nimport { RootState } from '../store/store';\nimport { selectToken } from '../store/user/selectors';\n\nconst getToken = (store: RootState): string | null => {\n  let token = selectToken(store);\n  if (!token) token = localStorage.getItem('TOKEN');\n  return token;\n};\n\nexport default getToken;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, entryMocked } from '../../../config';\nimport getToken from '../../../helpers/getToken';\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\nimport { RootState } from '../../store';\n\nconst deleteNote = createAsyncThunk<number, string>(\n  'notes/deleteNote',\n  async (fetchDate: string, thunkAPI) => {\n    if (entryMocked) {\n      return returnDataWithDelay(200, 'fast 3G');\n    }\n\n    const token = getToken(thunkAPI.getState() as RootState);\n\n    const res = await fetch(`${BASE_API_URL}/notes/${fetchDate}`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    return res.status;\n  },\n);\n\nexport default deleteNote;\n","export const dayDurationMs = 24 * 60 * 60 * 1000;\r\nexport const today = new Date().setUTCHours(0, 0, 0, 0);\r\n\r\nconst isYesterdayOrTomorrow = (initialDate: Date) => {\r\n  return Math.abs(initialDate.getTime() - today) === dayDurationMs;\r\n};\r\n\r\nconst isToday = (initialDate: Date) => {\r\n  return initialDate.getTime() === today;\r\n};\r\n\r\nconst isEditable = (initialDate: Date): boolean => {\r\n  return isYesterdayOrTomorrow(initialDate) || isToday(initialDate);\r\n};\r\n\r\nexport default isEditable;\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, entryMocked } from '../../../config';\nimport getToken from '../../../helpers/getToken';\nimport { dayDurationMs, today } from '../../../helpers/isEditable';\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\nimport mockShowNote from '../../../mocks/mockShowNote';\n\nimport { INote } from '../../../types/INote';\nimport { RootState } from '../../store';\n\nconst fetchNote = createAsyncThunk<INote, string>(\n  'notes/fetchNote',\n  async (fetchDate: string, thunkAPI) => {\n    if (entryMocked) {\n      if (\n        Math.abs(new Date(fetchDate).getTime() - today) <=\n        dayDurationMs * 2\n      ) {\n        return returnDataWithDelay(mockShowNote, 'fast 3G');\n      }\n\n      throw new Error('Mock write');\n    }\n\n    const token = getToken(thunkAPI.getState() as RootState);\n\n    const res = await fetch(`${BASE_API_URL}/notes/${fetchDate}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    const data = await res.json();\n    return data as INote;\n  },\n);\n\nexport default fetchNote;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, entryMocked } from '../../../config';\nimport getToken from '../../../helpers/getToken';\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\nimport { INote } from '../../../types/INote';\nimport { RootState } from '../../store';\n\nconst postNote = createAsyncThunk<INote, INote>(\n  'notes/postNote',\n  async (note: INote, thunkAPI) => {\n    if (entryMocked) {\n      return returnDataWithDelay(note, 'fast 3G');\n    }\n\n    const url = `${BASE_API_URL}/notes/`;\n\n    const token = getToken(thunkAPI.getState() as RootState);\n\n    const res = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(note),\n    });\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    const data = await res.json();\n    return data as INote;\n  },\n);\n\nexport default postNote;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, entryMocked } from '../../../config';\nimport getToken from '../../../helpers/getToken';\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\nimport { INote } from '../../../types/INote';\nimport { RootState } from '../../store';\n\nconst putNote = createAsyncThunk<INote, INote>(\n  'notes/putNote',\n  async (note: INote, thunkAPI) => {\n    if (entryMocked) {\n      return returnDataWithDelay(note, 'fast 3G');\n    }\n\n    const url = `${BASE_API_URL}/notes/${note.initialDate}`;\n\n    const token = getToken(thunkAPI.getState() as RootState);\n\n    const res = await fetch(url, {\n      method: 'PUT',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        heading: note.heading,\n        content: note.content,\n        modificationDate: note.modificationDate,\n      }),\n    });\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    const data = await res.json();\n    return data as INote;\n  },\n);\n\nexport default putNote;\n","import { createSlice, isAnyOf, PayloadAction } from '@reduxjs/toolkit';\nimport { toast } from 'react-toastify';\nimport { INote } from '../../types/INote';\nimport { NoteStatus } from '../../types/NoteStatus';\nimport deleteNote from './thunks/deleteNote';\nimport fetchNote from './thunks/fetchNote';\nimport postNote from './thunks/postNote';\nimport putNote from './thunks/putNote';\n\nexport const initialState: INote = {\n  heading: undefined,\n  content: undefined,\n  initialDate: undefined,\n  modificationDate: undefined,\n  status: 'write',\n};\n\nexport const noteSlice = createSlice({\n  name: 'note',\n  initialState,\n  reducers: {\n    setNote: (state, action: PayloadAction<INote>) => {\n      state = action.payload;\n    },\n    setStatus: (state, action: PayloadAction<NoteStatus>) => {\n      state.status = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchNote.rejected, (state) => {\n      state.status = 'write';\n    });\n\n    builder\n      .addCase(postNote.fulfilled, () => {\n        toast.success('Note was saved!');\n      })\n      .addCase(putNote.fulfilled, () => {\n        toast.success('Note was updated!');\n      })\n      .addCase(deleteNote.fulfilled, (state) => {\n        state.status = 'write';\n        toast.success('Note was deleted!');\n      });\n    builder.addMatcher(\n      isAnyOf(\n        fetchNote.pending,\n        postNote.pending,\n        putNote.pending,\n        deleteNote.pending,\n      ),\n      (state) => {\n        state.status = 'loading';\n      },\n    );\n\n    builder.addMatcher(\n      isAnyOf(fetchNote.fulfilled, postNote.fulfilled, putNote.fulfilled),\n      (state, action) => {\n        const { heading, content } = action.payload;\n        state.heading = heading;\n        state.content = content;\n        state.status = 'show';\n      },\n    );\n\n    builder.addMatcher(\n      isAnyOf(postNote.rejected, putNote.rejected, deleteNote.rejected),\n      (state, action) => {\n        toast.error(action.error.message);\n      },\n    );\n  },\n});\n\nexport const { setNote, setStatus } = noteSlice.actions;\n\nexport default noteSlice.reducer;\n","import React from 'react';\r\n\r\nimport './Loader.css';\r\n\r\nconst Loader = () => {\r\n  return <div className=\"loader\">Loading...</div>;\r\n};\r\n\r\nexport default Loader;\r\n","import classNames from 'classnames';\nimport React from 'react';\nimport { IButton } from '../../../types/IButton';\n\nconst RedButton = ({ value, className, onClick, isDisabled }: IButton) => {\n  return (\n    <input\n      type=\"submit\"\n      className={classNames('redButton', className)}\n      value={value}\n      disabled={isDisabled}\n      onClick={onClick}\n    />\n  );\n};\n\nexport default RedButton;\n","import React from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport RedButton from '../$buttons/RedButton/RedButton';\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport logo from '../../static/LargeLogo.png';\n\nimport './Header.css';\nimport { logout } from '../../store/user/slice';\nimport Container from '../Container/Container';\n\nconst Header = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const logoutUser = () => {\n    dispatch(logout());\n    navigate('/');\n  };\n\n  return (\n    <div className=\"header\">\n      <Container className=\"flex justify-between align-center\">\n        <Link to=\"/\">\n          <img src={logo} alt=\"Logo\" className=\"logo\" />\n        </Link>\n        <RedButton\n          value=\"Log Out\"\n          className=\"logoutButton\"\n          onClick={logoutUser}\n        />\n      </Container>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport classNames from 'classnames';\nimport Footer from '../Footer/Footer';\nimport Header from '../Header/Header';\n\nimport './PageTemplate.css';\n\ninterface Props {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst PageTemplate = ({ children, className }: Props) => {\n  return (\n    <section className=\"page\">\n      <Header />\n      <main className={classNames('page__content', className)}>{children}</main>\n      <Footer />\n    </section>\n  );\n};\n\nexport default PageTemplate;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { IButton } from '../../../types/IButton';\n\nconst SecondaryButton = ({\n  value,\n  className,\n  onClick,\n  isDisabled,\n}: IButton) => {\n  return (\n    <input\n      type=\"submit\"\n      className={classNames('secondaryButton', className)}\n      value={value}\n      disabled={isDisabled}\n      onClick={onClick}\n    />\n  );\n};\n\nexport default SecondaryButton;\n","import React from 'react';\n\nimport './ShowNote.css';\nimport { useParams } from 'react-router-dom';\nimport RedButton from '../../$buttons/RedButton/RedButton';\nimport SecondaryButton from '../../$buttons/SecondaryButton/SecondaryButton';\nimport isEditable from '../../../helpers/isEditable';\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport { setStatus } from '../../../store/note/slice';\nimport deleteNote from '../../../store/note/thunks/deleteNote';\nimport { INote } from '../../../types/INote';\n\ninterface Props {\n  note: INote;\n}\n\nconst ShowNote = ({ note }: Props) => {\n  const dispatch = useAppDispatch();\n\n  const { heading, content } = note;\n  const { date } = useParams();\n  const dateObj = new Date(date as string);\n  const canEdit = isEditable(dateObj);\n\n  return (\n    <>\n      <div className=\"showNote\">\n        <h1 className=\"showHeading\">{heading}</h1>\n        <hr className=\"headingContentLine\" />\n        <p className=\"showContent\">{content}</p>\n      </div>\n      <div className=\"showContentControlButtons\">\n        {canEdit && (\n          <SecondaryButton\n            value=\"Edit\"\n            className=\"editButton\"\n            onClick={() => dispatch(setStatus('update'))}\n          />\n        )}\n        <RedButton\n          value=\"Delete\"\n          className=\"deleteButton\"\n          onClick={() => {\n            dispatch(deleteNote(date as string));\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ShowNote;\n","// Convert Date object to string 'yyyy-mm-dd'\nconst dateToString = (date: Date): string => {\n  const year = date.getFullYear().toString();\n  let month = (date.getMonth() + 1).toString();\n  let day = date.getDate().toString();\n\n  if (month.length < 2) month = `0${month}`;\n  if (day.length < 2) day = `0${day}`;\n\n  return `${year}-${month}-${day}`;\n};\n\nexport default dateToString;\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport './WriteNote.css';\nimport PrimaryButton from '../../$buttons/PrimaryButton/PrimaryButton';\nimport dateToString from '../../../helpers/dateToString';\n\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport { INote } from '../../../types/INote';\nimport postNote from '../../../store/note/thunks/postNote';\nimport putNote from '../../../store/note/thunks/putNote';\n\ninterface IProps {\n  note: INote;\n}\n\nconst WriteNote = ({ note }: IProps) => {\n  const dispatch = useAppDispatch();\n  const { register, handleSubmit } = useForm();\n  const { date } = useParams();\n\n  const { heading, content, status } = note;\n\n  const submitNote = (_note: INote) => {\n    _note.initialDate = date;\n\n    if (status === 'write') {\n      dispatch(postNote(_note));\n    } else if (status === 'update') {\n      _note.modificationDate = dateToString(new Date());\n      dispatch(putNote(_note));\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(submitNote)} className=\"noteForm\">\n      <input\n        {...register('heading', { required: true })}\n        className=\"writeHeading inputField\"\n        placeholder=\"Title\"\n        defaultValue={heading}\n      />\n      <TextareaAutosize\n        {...register('content', { required: true })}\n        className=\"writeContent inputField\"\n        placeholder=\"Write your note...\"\n        defaultValue={content}\n      />\n      <PrimaryButton value=\"Save\" className=\"saveButton\" />\n    </form>\n  );\n};\n\nexport default WriteNote;\n","import React, { useLayoutEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport './Note.css';\n\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport useAppSelector from '../../../hooks/useAppSelector';\nimport selectNote from '../../../store/note/selectors';\nimport { initialState } from '../../../store/note/slice';\nimport fetchNote from '../../../store/note/thunks/fetchNote';\nimport Container from '../../Container/Container';\nimport Loader from '../../Loader/Loader';\nimport PageTemplate from '../../PageTemplate/PageTemplate';\nimport ShowNote from '../ShowNote/ShowNote';\nimport WriteNote from '../WriteNote/WriteNote';\n\nconst Note = () => {\n  const dispatch = useAppDispatch();\n  const note = useAppSelector(selectNote);\n  const { date } = useParams();\n\n  useLayoutEffect(() => {\n    dispatch(fetchNote(date as string));\n  }, [dispatch, date]);\n\n  return (\n    <PageTemplate>\n      <Container>\n        {note.status === 'loading' && <Loader />}\n        {note.status === 'show' && <ShowNote note={note} />}\n        {note.status === 'write' && <WriteNote note={initialState} />}\n        {note.status === 'update' && <WriteNote note={note} />}\n      </Container>\n    </PageTemplate>\n  );\n};\n\nexport default Note;\n","const isValidToken = (expiration: string): boolean => {\n  const expirationDate = new Date(expiration).getTime();\n  const currentDate = Date.now();\n  return currentDate < expirationDate;\n};\n\nexport default isValidToken;\n","import getToken from '../../../helpers/getToken';\nimport { RootState } from '../../store';\n\nconst selectIsAuth = (store: RootState): boolean => {\n  return Boolean(getToken(store));\n};\n\nexport default selectIsAuth;\n","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport './NotesCalendar.css';\r\nimport dateToString from '../../helpers/dateToString';\r\nimport Container from '../Container/Container';\r\nimport PageTemplate from '../PageTemplate/PageTemplate';\r\n\r\nconst NotesCalendar = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const redirectToNote = (date: Date) => {\r\n    const path = `/note/${dateToString(date)}`;\r\n    navigate(path);\r\n  };\r\n\r\n  return (\r\n    <PageTemplate>\r\n      <Container>\r\n        <Calendar className=\"calendar\" onClickDay={redirectToNote} />\r\n      </Container>\r\n    </PageTemplate>\r\n  );\r\n};\r\n\r\nexport default NotesCalendar;\r\n","import React, { useEffect } from 'react';\nimport {\n  Routes,\n  Route,\n  useLocation,\n  useNavigate,\n  Navigate,\n} from 'react-router-dom';\nimport LoginPage from '../$auth/LoginPage/LoginPage';\nimport RegistrationPage from '../$auth/RegistrationPage/RegistrationPage';\nimport Note from '../$note/Note/Note';\nimport isValidToken from '../../helpers/isValidToken';\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport useAppSelector from '../../hooks/useAppSelector';\nimport { selectExpiration } from '../../store/user/selectors';\nimport selectIsAuth from '../../store/user/selectors/selectIsAuth';\nimport { logout } from '../../store/user/slice';\nimport NotesCalendar from '../NotesCalendar/NotesCalendar';\n\nconst App = () => {\n  const isAuth = useAppSelector(selectIsAuth);\n\n  const dispatch = useAppDispatch();\n  const location = useLocation();\n  const expiration = useAppSelector(selectExpiration);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (typeof expiration === 'string' && !isValidToken(expiration as string)) {\n      dispatch(logout());\n      navigate('/');\n    }\n  }, [location, dispatch, expiration, navigate]);\n\n  if (!isAuth) {\n    return (\n      <Routes>\n        <Route path=\"/\" element={<LoginPage />} />\n        <Route path=\"/registration\" element={<RegistrationPage />} />\n      </Routes>\n    );\n  }\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<NotesCalendar />} />\n      <Route path=\"/note/:date\" element={<Note />} />\n      <Route path=\"/registration\" element={<Navigate replace to=\"/\" />} />\n    </Routes>\n  );\n};\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport isValidToken from '../helpers/isValidToken';\nimport userReducer from './user/slice';\nimport noteReducer from './note/slice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    note: noteReducer,\n  },\n});\n\nstore.subscribe(() => {\n  const username = store.getState().user.userName;\n  const { token, expiration } = store.getState().user.auth;\n  if (typeof token === 'string' && isValidToken(expiration as string)) {\n    localStorage.setItem('USERNAME', username as string);\n    localStorage.setItem('TOKEN', token as string);\n    localStorage.setItem('EXPIRATION', expiration as string);\n  } else {\n    localStorage.removeItem('USERNAME');\n    localStorage.removeItem('TOKEN');\n    localStorage.removeItem('EXPIRATION');\n  }\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the store load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web store is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different store. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport App from './components/App/App';\r\nimport { store } from './store/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport './index.css';\r\nimport './styles/colors.css';\r\nimport './styles/PrimaryButton.css';\r\nimport './styles/SecondaryButton.css';\r\nimport './styles/RedButton.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <HashRouter>\r\n        <ToastContainer className=\"toast\" autoClose={4000} limit={3} />\r\n        <App />\r\n      </HashRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your store to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}