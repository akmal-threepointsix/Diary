{"version":3,"sources":["hooks/useAppDispatch.ts","config.ts","store/user/thunks/loginUser.ts","mocks/mockAuth.ts","store/user/thunks/registerUser.ts","store/user/slice.ts","components/Container/Container.tsx","components/Footer/Footer.tsx","static/LargeLogo.png","components/PageTemplateUnauth/PageTemplateUnauth.tsx","components/$auth/LoginPage/LoginPage.tsx","components/$auth/RegistrationPage/RegistrationPage.tsx","hooks/useAppSelector.ts","store/note/selectors/index.ts","helpers/getToken.ts","store/note/thunks/deleteNote.ts","helpers/isEditable.ts","store/note/thunks/fetchNote.ts","store/note/thunks/postNote.ts","store/note/thunks/putNote.ts","store/note/slice.ts","components/Loader/Loader.tsx","components/Header/Header.tsx","components/PageTemplate/PageTemplate.tsx","components/$note/ShowNote/ShowNote.tsx","helpers/dateToString.ts","components/$note/WriteNote/WriteNote.tsx","components/$note/Note/Note.tsx","helpers/isValidToken.ts","store/user/selectors/index.ts","store/user/selectors/selectIsAuth.ts","components/NotesCalendar/NotesCalendar.tsx","components/App/App.tsx","store/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","BASE_API_URL","loginUser","Date","setHours","getHours","toString","createAsyncThunk","user","a","url","fetch","method","headers","body","JSON","stringify","res","ok","Error","statusText","json","data","registerUser","initialState","userName","localStorage","getItem","auth","token","expiration","userSlice","createSlice","name","reducers","setUsername","state","action","payload","logout","undefined","removeItem","extraReducers","builder","addMatcher","isAnyOf","fulfilled","actions","Container","children","className","classNames","Footer","PageTemplateUnauth","src","logo","alt","LoginPage","dispatch","useForm","register","handleSubmit","onSubmit","credentials","required","type","placeholder","value","to","RegistrationPage","navigate","useNavigate","useAppSelector","useSelector","selectNote","note","getToken","store","deleteNote","fetchDate","thunkAPI","getState","Authorization","status","dayDurationMs","today","setUTCHours","isEditable","initialDate","Math","abs","getTime","isYesterdayOrTomorrow","isToday","fetchNote","postNote","putNote","heading","content","modificationDate","noteSlice","setNote","setStatus","addCase","rejected","toast","success","pending","error","message","Loader","Header","onClick","PageTemplate","ShowNote","date","useParams","dateObj","canEdit","dateToString","year","getFullYear","month","getMonth","day","getDate","length","WriteNote","_note","defaultValue","Note","useLayoutEffect","isValidToken","expirationDate","now","selectExpiration","selectIsAuth","Boolean","NotesCalendar","onClickDay","path","App","isAuth","location","useLocation","useEffect","element","configureStore","reducer","noteReducer","userReducer","subscribe","username","setItem","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.6cef8832.chunk.js","sourcesContent":["import { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../store/store';\n\nconst useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>();\nexport default useAppDispatch;\n","export const BASE_API_URL = 'https://localhost:6969/api';\n\nexport const isDev = process.env.NODE_ENV === 'development';\n\nexport const entryMocked = isDev;\nexport const userMocked = isDev;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, userMocked } from '../../../config';\nimport mockAuth from '../../../mocks/mockAuth';\nimport { IAuth } from '../../../types/IAuth';\nimport { ICredentials } from '../../../types/ICredentials';\n\nconst loginUser = createAsyncThunk<IAuth, ICredentials>(\n  'user/login',\n  async (user: ICredentials) => {\n    if (userMocked) {\n      return mockAuth;\n    }\n\n    const url = `${BASE_API_URL}/login/`;\n\n    const res = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(user),\n    });\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    const data = await res.json();\n    return data as IAuth;\n  },\n);\n\nexport default loginUser;\n","import { IAuth } from '../types/IAuth';\n\nconst mockAuth: IAuth = {\n  token: 'mockToken',\n  expiration: new Date(\n    new Date().setHours(new Date().getHours() + 1),\n  ).toString(),\n};\n\nexport default mockAuth;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, userMocked } from '../../../config';\nimport mockAuth from '../../../mocks/mockAuth';\nimport { IAuth } from '../../../types/IAuth';\nimport { ICredentials } from '../../../types/ICredentials';\n\nconst registerUser = createAsyncThunk<IAuth, ICredentials>(\n  'user/register',\n  async (user: ICredentials) => {\n    if (userMocked) {\n      return mockAuth;\n    }\n\n    const url = `${BASE_API_URL}/register/`;\n\n    const res = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(user),\n    });\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    const data = await res.json();\n    return data as IAuth;\n  },\n);\n\nexport default registerUser;\n","import { createSlice, isAnyOf, PayloadAction } from '@reduxjs/toolkit';\nimport { IUser } from '../../types/IUser';\nimport loginUser from './thunks/loginUser';\nimport registerUser from './thunks/registerUser';\n\nexport const initialState: IUser = {\n  userName: localStorage.getItem('USERNAME'),\n  auth: {\n    token: localStorage.getItem('TOKEN'),\n    expiration: localStorage.getItem('EXPIRATION'),\n  },\n};\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    setUsername: (state, action: PayloadAction<string>) => {\n      state.userName = action.payload;\n    },\n    logout: (state) => {\n      state.auth.token = null;\n      state.auth.expiration = undefined;\n      state.userName = undefined;\n      localStorage.removeItem('USERNAME');\n      localStorage.removeItem('TOKEN');\n      localStorage.removeItem('EXPIRATION');\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addMatcher(\n      isAnyOf(registerUser.fulfilled, loginUser.fulfilled),\n      (state, action) => {\n        state.auth = action.payload;\n      },\n    );\n  },\n});\n\nexport const { setUsername, logout } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport './Container.css';\n\ninterface IProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst Container = ({ children, className }: IProps) => {\n  return <div className={classNames('container', className)}>{children}</div>;\n};\n\nexport default Container;\n","import React from 'react';\n\nimport './Footer.css';\nimport Container from '../Container/Container';\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <Container className=\"flex justify-between align-center\">\n        <p>© Web Application Programming, 2021-2022</p>\n        <p>Bohdan Soproniuk & Akmalkhon Mukhiddinov</p>\n      </Container>\n    </div>\n  );\n};\n\nexport default Footer;\n","export default __webpack_public_path__ + \"static/media/LargeLogo.e6a559ef.png\";","import React from 'react';\nimport classNames from 'classnames';\nimport Footer from '../Footer/Footer';\nimport logo from '../../static/LargeLogo.png';\n\ninterface Props {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst PageTemplateUnauth = ({ children, className }: Props) => {\n  return (\n    <section className=\"page\">\n      <img src={logo} alt=\"Logo\" className=\"logo\" />\n      <main className={classNames('page__content', className)}>{children}</main>\n      <Footer />\n    </section>\n  );\n};\n\nexport default PageTemplateUnauth;\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Link } from 'react-router-dom';\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport { setUsername } from '../../../store/user/slice';\nimport loginUser from '../../../store/user/thunks/loginUser';\nimport { ICredentials } from '../../../types/ICredentials';\nimport Container from '../../Container/Container';\n\nimport './LoginPage.css';\nimport PageTemplateUnauth from '../../PageTemplateUnauth/PageTemplateUnauth';\n\nconst LoginPage = () => {\n  const dispatch = useAppDispatch();\n  const { register, handleSubmit } = useForm();\n\n  const submitLogin = (credentials: ICredentials) => {\n    dispatch(setUsername(credentials.userName));\n    dispatch(loginUser(credentials));\n  };\n\n  return (\n    <PageTemplateUnauth>\n      <Container>\n        <form onSubmit={handleSubmit(submitLogin)} className=\"loginForm\">\n          <input\n            {...register('userName', { required: true })}\n            type=\"text\"\n            className=\"loginInput\"\n            placeholder=\"Username\"\n          />\n          <input\n            {...register('password', { required: true })}\n            type=\"password\"\n            className=\"loginInput\"\n            placeholder=\"Password\"\n          />\n          <input\n            type=\"submit\"\n            className=\"primaryButton loginButton\"\n            value=\"Log In\"\n          />\n        </form>\n        <div className=\"loginSubform\">\n          <p>\n            Don&apos;t have an account?&nbsp;\n            <Link to=\"/registration\">Sign Up</Link>\n          </p>\n        </div>\n      </Container>\n    </PageTemplateUnauth>\n  );\n};\n\nexport default LoginPage;\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Link, useNavigate } from 'react-router-dom';\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport { setUsername } from '../../../store/user/slice';\nimport registerUser from '../../../store/user/thunks/registerUser';\nimport { ICredentials } from '../../../types/ICredentials';\nimport Container from '../../Container/Container';\nimport PageTemplateUnauth from '../../PageTemplateUnauth/PageTemplateUnauth';\n\nconst RegistrationPage = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n  const { register, handleSubmit } = useForm();\n\n  const submitLogin = (credentials: ICredentials) => {\n    dispatch(setUsername(credentials.userName));\n    dispatch(registerUser(credentials));\n    navigate('/');\n  };\n\n  return (\n    <PageTemplateUnauth>\n      <Container>\n        <form onSubmit={handleSubmit(submitLogin)} className=\"loginForm\">\n          <input\n            {...register('userName', { required: true })}\n            type=\"text\"\n            className=\"loginInput\"\n            placeholder=\"Username\"\n          />\n          <input\n            {...register('password', { required: true })}\n            type=\"password\"\n            className=\"loginInput\"\n            placeholder=\"Password\"\n          />\n          <input\n            type=\"submit\"\n            className=\"primaryButton loginButton\"\n            value=\"Sign Up\"\n          />\n        </form>\n        <div className=\"loginSubform\">\n          <p>\n            Have an account?&nbsp;\n            <Link to=\"/\">Log In</Link>\n          </p>\n        </div>\n      </Container>\n    </PageTemplateUnauth>\n  );\n};\n\nexport default RegistrationPage;\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport type { RootState } from '../store/store';\n\nconst useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport default useAppSelector;\n","import { RootState } from '../../store';\nimport { INote } from '../../../types/INote';\n\nconst selectNote = (state: RootState): INote => state.note;\nexport default selectNote;\n","// First attempt to get token from Redux store, otherwise get token from the\n// localStorage. Reading from Redux store is faster.\nimport { RootState } from '../store/store';\n\nconst getToken = (store: RootState): string | null => {\n  let { token } = store.user.auth;\n  if (!token) token = localStorage.getItem('TOKEN');\n  return token;\n};\n\nexport default getToken;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, entryMocked } from '../../../config';\nimport getToken from '../../../helpers/getToken';\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\nimport { RootState } from '../../store';\n\nconst deleteNote = createAsyncThunk<number, string>(\n  'notes/deleteNote',\n  async (fetchDate: string, thunkAPI) => {\n    if (entryMocked) {\n      return returnDataWithDelay(200, 'fast 3G');\n    }\n\n    const token = getToken(thunkAPI.getState() as RootState);\n\n    const res = await fetch(`${BASE_API_URL}/notes/${fetchDate}`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    return res.status;\n  },\n);\n\nexport default deleteNote;\n","export const dayDurationMs = 24 * 60 * 60 * 1000;\r\nexport const today = new Date().setUTCHours(0, 0, 0, 0);\r\n\r\nconst isYesterdayOrTomorrow = (initialDate: Date) => {\r\n  return Math.abs(initialDate.getTime() - today) === dayDurationMs;\r\n};\r\n\r\nconst isToday = (initialDate: Date) => {\r\n  return initialDate.getTime() === today;\r\n};\r\n\r\nconst isEditable = (initialDate: Date): boolean => {\r\n  return isYesterdayOrTomorrow(initialDate) || isToday(initialDate);\r\n};\r\n\r\nexport default isEditable;\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, entryMocked } from '../../../config';\nimport getToken from '../../../helpers/getToken';\nimport { dayDurationMs, today } from '../../../helpers/isEditable';\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\nimport mockShowNote from '../../../mocks/mockShowNote';\n\nimport { INote } from '../../../types/INote';\nimport { RootState } from '../../store';\n\nconst fetchNote = createAsyncThunk<INote, string>(\n  'notes/fetchNote',\n  async (fetchDate: string, thunkAPI) => {\n    if (entryMocked) {\n      if (\n        Math.abs(new Date(fetchDate).getTime() - today) <=\n        dayDurationMs * 2\n      ) {\n        return returnDataWithDelay(mockShowNote, 'fast 3G');\n      }\n\n      throw new Error('Mock write');\n    }\n\n    const token = getToken(thunkAPI.getState() as RootState);\n\n    const res = await fetch(`${BASE_API_URL}/notes/${fetchDate}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    });\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    const data = await res.json();\n    return data as INote;\n  },\n);\n\nexport default fetchNote;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, entryMocked } from '../../../config';\nimport getToken from '../../../helpers/getToken';\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\nimport { INote } from '../../../types/INote';\nimport { RootState } from '../../store';\n\nconst postNote = createAsyncThunk<INote, INote>(\n  'notes/postNote',\n  async (note: INote, thunkAPI) => {\n    if (entryMocked) {\n      return returnDataWithDelay(note, 'fast 3G');\n    }\n\n    const url = `${BASE_API_URL}/notes/`;\n\n    const token = getToken(thunkAPI.getState() as RootState);\n\n    const res = await fetch(url, {\n      method: 'POST',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(note),\n    });\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    const data = await res.json();\n    return data as INote;\n  },\n);\n\nexport default postNote;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, entryMocked } from '../../../config';\nimport getToken from '../../../helpers/getToken';\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\nimport { INote } from '../../../types/INote';\nimport { RootState } from '../../store';\n\nconst putNote = createAsyncThunk<INote, INote>(\n  'notes/putNote',\n  async (note: INote, thunkAPI) => {\n    if (entryMocked) {\n      return returnDataWithDelay(note, 'fast 3G');\n    }\n\n    const url = `${BASE_API_URL}/notes/${note.initialDate}`;\n\n    const token = getToken(thunkAPI.getState() as RootState);\n\n    const res = await fetch(url, {\n      method: 'PUT',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        heading: note.heading,\n        content: note.content,\n        modificationDate: note.modificationDate,\n      }),\n    });\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    const data = await res.json();\n    return data as INote;\n  },\n);\n\nexport default putNote;\n","import { createSlice, isAnyOf, PayloadAction } from '@reduxjs/toolkit';\nimport { toast } from 'react-toastify';\nimport { INote } from '../../types/INote';\nimport { NoteStatus } from '../../types/NoteStatus';\nimport deleteNote from './thunks/deleteNote';\nimport fetchNote from './thunks/fetchNote';\nimport postNote from './thunks/postNote';\nimport putNote from './thunks/putNote';\n\nexport const initialState: INote = {\n  heading: undefined,\n  content: undefined,\n  initialDate: undefined,\n  modificationDate: undefined,\n  status: 'write',\n};\n\nexport const noteSlice = createSlice({\n  name: 'note',\n  initialState,\n  reducers: {\n    setNote: (state, action: PayloadAction<INote>) => {\n      state = action.payload;\n    },\n    setStatus: (state, action: PayloadAction<NoteStatus>) => {\n      state.status = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchNote.rejected, (state) => {\n      state.status = 'write';\n    });\n\n    builder\n      .addCase(postNote.fulfilled, () => {\n        toast.success('Note was saved!');\n      })\n      .addCase(putNote.fulfilled, () => {\n        toast.success('Note was updated!');\n      })\n      .addCase(deleteNote.fulfilled, (state) => {\n        state.status = 'write';\n        toast.success('Note was deleted!');\n      });\n    builder.addMatcher(\n      isAnyOf(\n        fetchNote.pending,\n        postNote.pending,\n        putNote.pending,\n        deleteNote.pending,\n      ),\n      (state) => {\n        state.status = 'loading';\n      },\n    );\n\n    builder.addMatcher(\n      isAnyOf(fetchNote.fulfilled, postNote.fulfilled, putNote.fulfilled),\n      (state, action) => {\n        const { heading, content } = action.payload;\n        state.heading = heading;\n        state.content = content;\n        state.status = 'show';\n      },\n    );\n\n    builder.addMatcher(\n      isAnyOf(postNote.rejected, putNote.rejected, deleteNote.rejected),\n      (state, action) => {\n        toast.error(action.error.message);\n      },\n    );\n  },\n});\n\nexport const { setNote, setStatus } = noteSlice.actions;\n\nexport default noteSlice.reducer;\n","import React from 'react';\r\n\r\nimport './Loader.css';\r\n\r\nconst Loader = () => {\r\n  return <div className=\"loader\">Loading...</div>;\r\n};\r\n\r\nexport default Loader;\r\n","import React from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport logo from '../../static/LargeLogo.png';\n\nimport './Header.css';\nimport { logout } from '../../store/user/slice';\nimport Container from '../Container/Container';\n\nconst Header = () => {\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const logoutUser = () => {\n    dispatch(logout());\n    navigate('/');\n  };\n\n  return (\n    <div className=\"header\">\n      <Container className=\"flex justify-between align-center\">\n        <Link to=\"/\">\n          <img src={logo} alt=\"Logo\" className=\"logo\" />\n        </Link>\n        <input\n          type=\"button\"\n          className=\"redButton logoutButton\"\n          value=\"Log out\"\n          onClick={logoutUser}\n        />\n      </Container>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport classNames from 'classnames';\nimport Footer from '../Footer/Footer';\nimport Header from '../Header/Header';\n\nimport './PageTemplate.css';\n\ninterface Props {\n  children: React.ReactNode;\n  className?: string;\n}\n\nconst PageTemplate = ({ children, className }: Props) => {\n  return (\n    <section className=\"page\">\n      <Header />\n      <main className={classNames('page__content', className)}>{children}</main>\n      <Footer />\n    </section>\n  );\n};\n\nexport default PageTemplate;\n","import React from 'react';\n\nimport './ShowNote.css';\nimport { useParams } from 'react-router-dom';\nimport isEditable from '../../../helpers/isEditable';\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport { setStatus } from '../../../store/note/slice';\nimport deleteNote from '../../../store/note/thunks/deleteNote';\nimport { INote } from '../../../types/INote';\n\ninterface Props {\n  note: INote;\n}\n\nconst ShowNote = ({ note }: Props) => {\n  const dispatch = useAppDispatch();\n\n  const { heading, content } = note;\n  const { date } = useParams();\n  const dateObj = new Date(date as string);\n  const canEdit = isEditable(dateObj);\n\n  return (\n    <>\n      <div className=\"showNote\">\n        <h1 className=\"showHeading\">{heading}</h1>\n        <hr className=\"headingContentLine\" />\n        <p className=\"showContent\">{content}</p>\n      </div>\n      <div className=\"showContentControlButtons\">\n        {canEdit && (\n          <input\n            type=\"button\"\n            className=\"secondaryButton editButton\"\n            value=\"Edit\"\n            onClick={() => dispatch(setStatus('update'))}\n          />\n        )}\n        <input\n          type=\"button\"\n          className=\"redButton deleteButton\"\n          value=\"Delete\"\n          onClick={() => {\n            dispatch(deleteNote(date as string));\n          }}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default ShowNote;\n","// Convert Date object to string 'yyyy-mm-dd'\nconst dateToString = (date: Date): string => {\n  const year = date.getFullYear().toString();\n  let month = (date.getMonth() + 1).toString();\n  let day = date.getDate().toString();\n\n  if (month.length < 2) month = `0${month}`;\n  if (day.length < 2) day = `0${day}`;\n\n  return `${year}-${month}-${day}`;\n};\n\nexport default dateToString;\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport './WriteNote.css';\nimport dateToString from '../../../helpers/dateToString';\n\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport { INote } from '../../../types/INote';\nimport postNote from '../../../store/note/thunks/postNote';\nimport putNote from '../../../store/note/thunks/putNote';\n\ninterface IProps {\n  note: INote;\n}\n\nconst WriteNote = ({ note }: IProps) => {\n  const dispatch = useAppDispatch();\n  const { register, handleSubmit } = useForm();\n  const { date } = useParams();\n\n  const { heading, content, status } = note;\n\n  const submitNote = (_note: INote) => {\n    _note.initialDate = date;\n\n    if (status === 'write') {\n      dispatch(postNote(_note));\n    } else if (status === 'update') {\n      _note.modificationDate = dateToString(new Date());\n      dispatch(putNote(_note));\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit(submitNote)} className=\"noteForm\">\n      <input\n        {...register('heading', { required: true })}\n        className=\"writeHeading inputField\"\n        placeholder=\"Title\"\n        defaultValue={heading}\n      />\n      <TextareaAutosize\n        {...register('content', { required: true })}\n        className=\"writeContent inputField\"\n        placeholder=\"Write your note...\"\n        defaultValue={content}\n      />\n      <input type=\"submit\" className=\"primaryButton saveButton\" value=\"Save\" />\n    </form>\n  );\n};\n\nexport default WriteNote;\n","import React, { useLayoutEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport './Note.css';\n\nimport useAppDispatch from '../../../hooks/useAppDispatch';\nimport useAppSelector from '../../../hooks/useAppSelector';\nimport selectNote from '../../../store/note/selectors';\nimport { initialState } from '../../../store/note/slice';\nimport fetchNote from '../../../store/note/thunks/fetchNote';\nimport Container from '../../Container/Container';\nimport Loader from '../../Loader/Loader';\nimport PageTemplate from '../../PageTemplate/PageTemplate';\nimport ShowNote from '../ShowNote/ShowNote';\nimport WriteNote from '../WriteNote/WriteNote';\n\nconst Note = () => {\n  const dispatch = useAppDispatch();\n  const note = useAppSelector(selectNote);\n  const { date } = useParams();\n\n  useLayoutEffect(() => {\n    dispatch(fetchNote(date as string));\n  }, [dispatch, date]);\n\n  return (\n    <PageTemplate>\n      <Container>\n        {note.status === 'loading' && <Loader />}\n        {note.status === 'show' && <ShowNote note={note} />}\n        {note.status === 'write' && <WriteNote note={initialState} />}\n        {note.status === 'update' && <WriteNote note={note} />}\n      </Container>\n    </PageTemplate>\n  );\n};\n\nexport default Note;\n","const isValidToken = (expiration: string): boolean => {\n  const expirationDate = new Date(expiration).getTime();\n  const currentDate = Date.now();\n  return currentDate < expirationDate;\n};\n\nexport default isValidToken;\n","import { IAuth } from '../../../types/IAuth';\nimport { RootState } from '../../store';\n\nexport const selectUserName = (state: RootState): string | undefined | null =>\n  state.user.userName;\nexport const selectAuth = (state: RootState): IAuth => state.user.auth;\nexport const selectExpiration = (state: RootState): string | undefined | null =>\n  state.user.auth.expiration;\n","import getToken from '../../../helpers/getToken';\nimport { RootState } from '../../store';\n\nconst selectIsAuth = (store: RootState): boolean => {\n  return Boolean(getToken(store));\n};\n\nexport default selectIsAuth;\n","import React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport './NotesCalendar.css';\r\nimport dateToString from '../../helpers/dateToString';\r\nimport Container from '../Container/Container';\r\nimport PageTemplate from '../PageTemplate/PageTemplate';\r\n\r\nconst NotesCalendar = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const redirectToNote = (date: Date) => {\r\n    const path = `/note/${dateToString(date)}`;\r\n    navigate(path);\r\n  };\r\n\r\n  return (\r\n    <PageTemplate>\r\n      <Container>\r\n        <Calendar className=\"calendar\" onClickDay={redirectToNote} />\r\n      </Container>\r\n    </PageTemplate>\r\n  );\r\n};\r\n\r\nexport default NotesCalendar;\r\n","import React, { useEffect } from 'react';\nimport { Routes, Route, useLocation, useNavigate } from 'react-router-dom';\nimport LoginPage from '../$auth/LoginPage/LoginPage';\nimport RegistrationPage from '../$auth/RegistrationPage/RegistrationPage';\nimport Note from '../$note/Note/Note';\nimport isValidToken from '../../helpers/isValidToken';\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport useAppSelector from '../../hooks/useAppSelector';\nimport { selectExpiration } from '../../store/user/selectors';\nimport selectIsAuth from '../../store/user/selectors/selectIsAuth';\nimport { logout } from '../../store/user/slice';\nimport NotesCalendar from '../NotesCalendar/NotesCalendar';\n\nconst App = () => {\n  const isAuth = useAppSelector(selectIsAuth);\n\n  const dispatch = useAppDispatch();\n  const location = useLocation();\n  const expiration = useAppSelector(selectExpiration);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (typeof expiration === 'string' && !isValidToken(expiration as string)) {\n      dispatch(logout());\n      navigate('/');\n    }\n  }, [location, dispatch, expiration, navigate]);\n\n  if (!isAuth) {\n    return (\n      <Routes>\n        <Route path=\"/\" element={<LoginPage />} />\n        <Route path=\"/registration\" element={<RegistrationPage />} />\n      </Routes>\n    );\n  }\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<NotesCalendar />} />\n      <Route path=\"/note/:date\" element={<Note />} />\n    </Routes>\n  );\n};\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport isValidToken from '../helpers/isValidToken';\nimport noteReducer from './note/slice';\nimport userReducer from './user/slice';\n\nexport const store = configureStore({\n  reducer: {\n    note: noteReducer,\n    user: userReducer,\n  },\n});\n\nstore.subscribe(() => {\n  const username = store.getState().user.userName;\n  const { token, expiration } = store.getState().user.auth;\n  if (typeof token === 'string' && isValidToken(expiration as string)) {\n    localStorage.setItem('USERNAME', username as string);\n    localStorage.setItem('TOKEN', token as string);\n    localStorage.setItem('EXPIRATION', expiration as string);\n  } else {\n    localStorage.removeItem('USERNAME');\n    localStorage.removeItem('TOKEN');\n    localStorage.removeItem('EXPIRATION');\n  }\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the store load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web store is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different store. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\nimport App from './components/App/App';\nimport { store } from './store/store';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport './index.css';\nimport './styles/colors.css';\nimport './styles/PrimaryButton.css';\nimport './styles/SecondaryButton.css';\nimport './styles/RedButton.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <ToastContainer className=\"toast\" />\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your store to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}