{"version":3,"sources":["static/LargeLogo.png","components/Header/Header.tsx","hooks/useAppDispatch.ts","hooks/useAppSelector.ts","store/entry/selectors/index.ts","config.ts","helpers/dateToString.ts","helpers/returnDataWithDelay.ts","mocks/mockWriteEntry.ts","store/entry/thunks/getEntry.ts","components/ShowNote/ShowNote.tsx","store/entry/thunks/postEntry.ts","components/WriteNote/WriteNote.tsx","components/Note/Note.tsx","components/NotesCalendar/NotesCalendar.tsx","components/App/App.tsx","store/entry/slice.ts","store/store.ts","serviceWorker.ts","index.tsx"],"names":["Header","to","src","logo","alt","className","useAppDispatch","useDispatch","useAppSelector","useSelector","selectEntry","state","entry","BASE_API_URL","dateToString","date","getFullYear","toString","getMonth","getDate","returnDataWithDelay","data","throttling","delayMs","Math","floor","random","Promise","resolve","setTimeout","mockWriteEntry","title","undefined","note","status","getEntry","createAsyncThunk","fetchDate","a","fetch","res","ok","Error","statusText","json","ShowNote","postEntry","url","method","headers","body","JSON","stringify","WriteNote","dispatch","useForm","register","handleSubmit","useParams","onSubmit","console","log","creationDate","required","placeholder","type","value","Note","useLayoutEffect","NotesCalendar","navigate","useNavigate","onClickDay","path","App","element","initialState","entrySlice","createSlice","name","reducers","setEntry","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","store","configureStore","reducer","entryReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.438dc482.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/LargeLogo.e6a559ef.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport logo from '../../static/LargeLogo.png';\n\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <Link to=\"/\">\n      <img src={logo} alt=\"Logo\" className=\"logo\" />\n    </Link>\n  );\n};\n\nexport default Header;\n","import { useDispatch } from 'react-redux';\nimport { AppDispatch } from '../store/store';\n\nconst useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>();\nexport default useAppDispatch;\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport type { RootState } from '../store/store';\n\nconst useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport default useAppSelector;\n","import { RootState } from '../../store';\n\nconst selectEntry = (state: RootState) => state.entry;\nexport default selectEntry;\n","export const BASE_API_URL = 'https://localhost:7278/api';\n\nexport const isDev = process.env.NODE_ENV === 'development';\n\nexport const entryMocked = isDev;\n","// Convert Date object to string 'yyyymmdd'\nconst dateToString = (date: Date): string => {\n  return `${date.getFullYear().toString()}-${(\n    date.getMonth() + 1\n  ).toString()}-${date.getDate().toString()}`;\n};\n\nexport default dateToString;\n","const returnDataWithDelay = <T>(\n  data: T,\n  throttling?: '4G' | 'fast 3G' | 'slow 3G',\n): Promise<T> => {\n  let delayMs = 0;\n\n  switch (throttling) {\n    case 'slow 3G':\n      delayMs = Math.floor(Math.random() * 10000) + 3000;\n      break;\n    case 'fast 3G':\n      delayMs = Math.floor(Math.random() * 3000) + 500;\n      break;\n    case '4G':\n    default:\n      delayMs = Math.floor(Math.random() * 500) + 100;\n      break;\n  }\n\n  return new Promise((resolve) => setTimeout(() => resolve(data), delayMs));\n};\n\nexport default returnDataWithDelay;\n","import { IEntry } from '../store/entry/slice';\n\nconst mockWriteEntry: IEntry = {\n  title: undefined,\n  note: undefined,\n  status: 'write',\n};\n\nexport default mockWriteEntry;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, entryMocked } from '../../../config';\nimport dateToString from '../../../helpers/dateToString';\nimport returnDataWithDelay from '../../../helpers/returnDataWithDelay';\nimport mockShowEntry from '../../../mocks/mockShowEntry';\nimport mockWriteEntry from '../../../mocks/mockWriteEntry';\nimport { IEntry } from '../slice';\n\nconst getEntry = createAsyncThunk<IEntry, string>(\n  'entries/fetchEntry',\n  async (fetchDate: string) => {\n    if (entryMocked) {\n      if (fetchDate === dateToString(new Date())) {\n        return returnDataWithDelay(mockShowEntry, '4G');\n      }\n\n      return returnDataWithDelay(mockWriteEntry, '4G');\n    }\n\n    const res = await fetch(`${BASE_API_URL}/entries/${fetchDate}`);\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    const data = await res.json();\n    return data as IEntry;\n  },\n);\n\nexport default getEntry;\n","import React from 'react';\n\nimport './ShowNote.css';\nimport { IEntry } from '../../store/entry/slice';\n\ninterface Props {\n  entry: IEntry;\n}\n\nconst ShowNote = ({ entry }: Props) => {\n  const { title, note } = entry;\n\n  return (\n    <div className=\"showEntry\">\n      <h1 className=\"showTitle\">{title}</h1>\n      <p className=\"showNote\">{note}</p>\n    </div>\n  );\n};\n\nexport default ShowNote;\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { BASE_API_URL, entryMocked } from '../../../config';\nimport { IEntry } from '../slice';\n\nconst postEntry = createAsyncThunk<IEntry, IEntry>(\n  'entries/fetchEntry',\n  async (note: IEntry) => {\n    if (entryMocked) {\n      return note;\n    }\n\n    const url = `${BASE_API_URL}/entries/`;\n\n    const res = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(note),\n    });\n\n    if (!res.ok) throw new Error(res.statusText);\n\n    const data = await res.json();\n    return data as IEntry;\n  },\n);\n\nexport default postEntry;\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom';\nimport TextareaAutosize from 'react-textarea-autosize';\n\nimport './WriteNote.css';\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport { IEntry } from '../../store/entry/slice';\nimport postEntry from '../../store/entry/thunks/postEntry';\n\ninterface INote {\n  title: string;\n  note: string;\n  creationDate?: string;\n}\n\nconst WriteNote = () => {\n  const dispatch = useAppDispatch();\n  const { register, handleSubmit } = useForm();\n  const { date } = useParams();\n\n  const submitNote = (entry: INote) => {\n    console.log(entry);\n    entry.creationDate = date;\n    dispatch(postEntry(entry as IEntry));\n  };\n\n  return (\n    <form onSubmit={handleSubmit(submitNote)} className=\"noteForm\">\n      <input\n        {...register('title', { required: true })}\n        className=\"title\"\n        placeholder=\"Title\"\n      />\n      <TextareaAutosize\n        {...register('note', { required: true })}\n        className=\"noteText\"\n        placeholder=\"Write your note...\"\n      />\n      <input type=\"submit\" className=\"submitButton\" value=\"Save\" />\n    </form>\n  );\n};\n\nexport default WriteNote;\n","import React, { useLayoutEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport './Note.css';\n\nimport useAppDispatch from '../../hooks/useAppDispatch';\nimport useAppSelector from '../../hooks/useAppSelector';\nimport selectEntry from '../../store/entry/selectors';\nimport getEntry from '../../store/entry/thunks/getEntry';\nimport ShowNote from '../ShowNote/ShowNote';\nimport WriteNote from '../WriteNote/WriteNote';\n\nconst Note = () => {\n  const dispatch = useAppDispatch();\n  const entry = useAppSelector(selectEntry);\n  const { date } = useParams();\n\n  useLayoutEffect(() => {\n    dispatch(getEntry(date as string));\n  }, [date]);\n\n  if (entry.status === 'loading') return <p>Loading...</p>;\n\n  if (entry.status === 'show') {\n    return <ShowNote entry={entry} />;\n  }\n\n  return <WriteNote />;\n};\n\nexport default Note;\n","import React from 'react';\nimport Calendar from 'react-calendar';\nimport { useNavigate } from 'react-router-dom';\n\nimport 'react-calendar/dist/Calendar.css';\nimport './NotesCalendar.css';\nimport dateToString from '../../helpers/dateToString';\n\nconst NotesCalendar = () => {\n  const navigate = useNavigate();\n\n  const redirectToNote = (date: Date) => {\n    const path = `/note/${dateToString(date)}`;\n    navigate(path);\n  };\n\n  return (\n    <div className=\"calendar-container\">\n      <Calendar className=\"calendar\" onClickDay={redirectToNote} />\n    </div>\n  );\n};\n\nexport default NotesCalendar;\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Header from '../Header/Header';\nimport Note from '../Note/Note';\nimport NotesCalendar from '../NotesCalendar/NotesCalendar';\n\nconst App = () => {\n  return (\n    <Router>\n      <Header />\n      <Routes>\n        <Route path=\"/\" element={<NotesCalendar />} />\n        <Route path=\"/note/:date\" element={<Note />} />\n      </Routes>\n    </Router>\n  );\n};\n\nexport default App;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport getEntry from './thunks/getEntry';\n\nexport interface IEntry {\n  title: string | undefined;\n  note: string | undefined;\n  creationDate?: string | undefined;\n  status: 'loading' | 'show' | 'write';\n}\n\nconst initialState: IEntry = {\n  title: undefined,\n  note: undefined,\n  creationDate: undefined,\n  status: 'loading',\n};\n\nexport const entrySlice = createSlice({\n  name: 'entry',\n  initialState,\n  reducers: {\n    setEntry: (state, action: PayloadAction<IEntry>) => {\n      state = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getEntry.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(getEntry.fulfilled, (state, action) => {\n        const { title, note, status } = action.payload;\n        state.title = title;\n        state.note = note;\n        state.status = status;\n      })\n      .addCase(getEntry.rejected, (state) => {\n        state.status = 'write';\n      });\n  },\n});\n\nexport const { setEntry } = entrySlice.actions;\n\nexport default entrySlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport entryReducer from './entry/slice';\n\nexport const store = configureStore({\n  reducer: {\n    entry: entryReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the store load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web store is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different store. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './components/App/App';\nimport { store } from './store/store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your store to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}